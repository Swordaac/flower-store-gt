'use client';

import { useState, useEffect, useMemo } from 'react';
import { useSearchParams } from 'next/navigation';
import { UserProfile } from '@/components/auth/UserProfile';
import { ProtectedRoute } from '@/components/auth/ProtectedRoute';
import { ProductForm } from '@/components/ProductForm';
import { OrderManagement } from '@/components/OrderManagement';
import { AdminShopCreation } from '@/components/AdminShopCreation';
import { PickupLocationManagement } from '@/components/PickupLocationManagement';
import { useUser } from '@/contexts/UserContext';
import { 
  HomeIcon, 
  CubeIcon, 
  ShoppingCartIcon, 
  UserGroupIcon, 
  ChartBarIcon, 
  CogIcon,
  PlusIcon,
  EyeIcon,
  PencilIcon,
  TrashIcon,
  BuildingStorefrontIcon,
  MapPinIcon,
  EnvelopeIcon as MailIcon,
  CheckCircleIcon,
  XCircleIcon
} from '@heroicons/react/24/outline';

interface DashboardStats {
  totalProducts: number;
  totalOrders: number;
  pendingOrders: number;
  totalRevenue: number;
}

interface Product {
  _id: string;
  name: string;
  color: string;
  description: string;
  variants: Array<{
    tierName: 'standard' | 'deluxe' | 'premium';
    price: number;
    stock: number;
    images: Array<{
      size: string;
      url: string;
      alt: string;
      isPrimary: boolean;
    }>;
    isActive: boolean;
  }>;
  price: {
    standard: number;
    deluxe: number;
    premium: number;
  };
  stock: number;
  tags: string[];
  images: Array<{
    size: string;
    url: string;
    alt: string;
    isPrimary: boolean;
  }>;
  deluxeImage?: {
    url: string;
    alt: string;
  };
  premiumImage?: {
    url: string;
    alt: string;
  };
  isActive: boolean;
  isFeatured: boolean;
  isBestSeller: boolean;
  createdAt: string;
  occasions?: Array<{
    _id: string;
    name: string;
    sympathy?: string[];
  }>;
  productTypes?: Array<{
    _id: string;
    name: string;
    color: string;
    icon?: string;
  }>;
}

interface Order {
  _id: string;
  orderNumber: string;
  customerId: string;
  customerName?: string;
  customerEmail?: string;
  customerPhone?: string;
  items: Array<{
    productId: string;
    name: string;
    price: number;
    quantity: number;
    total: number;
  }>;
  subtotal: number;
  taxAmount: number;
  deliveryFee: number;
  total: number;
  status: 'pending' | 'confirmed' | 'preparing' | 'ready' | 'shipped' | 'delivered' | 'cancelled';
  delivery: {
    method: 'pickup' | 'delivery';
    address?: {
      street: string;
      city: string;
      state: string;
      postal: string;
      country: string;
    };
    instructions?: string;
    estimatedDelivery?: Date;
  };
  notes?: string;
  createdAt: string;
  updatedAt: string;
}

export default function DashboardPage() {
  const { currentUser, userShop, isAdmin, isShopOwner, hasShop, session } = useUser();
  const searchParams = useSearchParams();
  const [activeTab, setActiveTab] = useState('overview');
  const [stats, setStats] = useState<DashboardStats>({
    totalProducts: 0,
    totalOrders: 0,
    pendingOrders: 0,
    totalRevenue: 0
  });
  const [products, setProducts] = useState<Product[]>([]);
  const [orders, setOrders] = useState<Order[]>([]);
  const [loading, setLoading] = useState(true);
  const [showProductForm, setShowProductForm] = useState(false);
  const [editingProduct, setEditingProduct] = useState<Product | null>(null);
  const [selectedOrder, setSelectedOrder] = useState<Order | null>(null);
  const [showShopCreation, setShowShopCreation] = useState(false);
  const [allShops, setAllShops] = useState<any[]>([]);
  const [selectedShop, setSelectedShop] = useState<any>(null);
  const [shopsLoading, setShopsLoading] = useState(false);

  const tabs = [
    { id: 'overview', name: 'Overview', icon: HomeIcon, show: true },
    { id: 'shop', name: 'My Shop', icon: BuildingStorefrontIcon, show: isShopOwner && hasShop },
    { id: 'products', name: 'Products', icon: CubeIcon, show: isShopOwner && hasShop },
    { id: 'orders', name: 'Orders', icon: ShoppingCartIcon, show: isShopOwner && hasShop },
    { id: 'pickup-locations', name: 'Pickup Locations', icon: MapPinIcon, show: isShopOwner && hasShop },
    { id: 'customers', name: 'Customers', icon: UserGroupIcon, show: isShopOwner && hasShop },
    { id: 'contact-messages', name: 'Contact Messages', icon: MailIcon, show: isShopOwner && hasShop },
    { id: 'analytics', name: 'Analytics', icon: ChartBarIcon, show: isShopOwner && hasShop },
    { id: 'admin', name: 'Admin Panel', icon: CogIcon, show: isAdmin },
    { id: 'settings', name: 'Settings', icon: CogIcon, show: true },
  ];

  // ... [Keep all the existing functions] ...

  return (
    <ProtectedRoute>
      <div className="min-h-screen bg-gray-50">
        <div className="flex">
          {/* Sidebar */}
          <div className="w-64 bg-white shadow-lg min-h-screen">
            <div className="p-6">
              <h2 className="text-xl font-semibold text-gray-800">Dashboard</h2>
              <p className="text-sm text-gray-600 mt-1">
                {currentUser?.role === 'admin' ? 'Admin Panel' : 
                 currentUser?.role === 'shop_owner' ? 'Shop Management' : 
                 'Customer Dashboard'}
              </p>
              {isShopOwner && userShop && (
                <div className="mt-2 p-2 bg-indigo-50 rounded-md">
                  <p className="text-xs text-indigo-700 font-medium">Viewing: {userShop.name}</p>
                </div>
              )}
              {isAdmin && selectedShop && (
                <div className="mt-2 p-2 bg-blue-50 rounded-md">
                  <p className="text-xs text-blue-700 font-medium">Admin View: {selectedShop.name}</p>
                </div>
              )}
            </div>
            
            <nav className="px-3">
              {tabs.filter(tab => tab.show).map((tab) => {
                const Icon = tab.icon;
                return (
                  <button
                    key={tab.id}
                    onClick={() => setActiveTab(tab.id)}
                    className={`w-full flex items-center px-3 py-2 text-sm font-medium rounded-md mb-1 transition-colors ${
                      activeTab === tab.id
                        ? 'bg-indigo-100 text-indigo-700'
                        : 'text-gray-600 hover:bg-gray-50 hover:text-gray-900'
                    }`}
                  >
                    <Icon className="mr-3 h-5 w-5" />
                    {tab.name}
                  </button>
                );
              })}
            </nav>
          </div>

          {/* Main Content */}
          <div className="flex-1 p-8">
            <div className="max-w-7xl mx-auto">
              {renderTabContent()}
            </div>
          </div>
        </div>

        {/* Modals */}
        {showProductForm && (
          <ProductForm
            product={editingProduct}
            onSubmit={handleProductSubmit}
            onCancel={() => {
              setShowProductForm(false);
              setEditingProduct(null);
            }}
            isEditing={!!editingProduct}
            shopId={userShop?._id}
          />
        )}

        {selectedOrder && (
          <OrderManagement
            order={selectedOrder}
            onStatusUpdate={handleOrderStatusUpdate}
            onClose={() => setSelectedOrder(null)}
          />
        )}

        {showShopCreation && (
          <AdminShopCreation
            onClose={() => setShowShopCreation(false)}
            onShopCreated={() => {
              setShowShopCreation(false);
              // Refresh user data to show updated role
              window.location.reload();
            }}
          />
        )}
      </div>
    </ProtectedRoute>
  );
}

// ... [Keep all the other component definitions] ...
