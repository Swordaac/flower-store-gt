const axios = require('axios');

console.log('üß™ Testing User Creation Flow');
console.log('=============================\n');

const BACKEND_URL = 'http://localhost:5001';

async function testUserCreation() {
  try {
    console.log('1Ô∏è‚É£ Testing Backend Health...');
    const healthResponse = await axios.get(`${BACKEND_URL}/health`);
    console.log('‚úÖ Backend is running:', healthResponse.data);
    
    console.log('\n2Ô∏è‚É£ Testing New Create-User Endpoint...');
    console.log('üìù This endpoint should be called automatically after Supabase signup');
    console.log('   Endpoint: POST /api/auth/create-user');
    console.log('   Requires: Valid Supabase JWT token');
    
    console.log('\n3Ô∏è‚É£ Testing Without Token (Should Fail)...');
    try {
      await axios.post(`${BACKEND_URL}/api/auth/create-user`, {
        email: 'test@example.com',
        fullName: 'Test User'
      });
      console.log('‚ùå Should have failed without token');
    } catch (error) {
      if (error.response?.status === 401) {
        console.log('‚úÖ Correctly requires authentication');
      } else {
        console.log('‚ùå Unexpected error:', error.response?.data || error.message);
      }
    }
    
    console.log('\n4Ô∏è‚É£ Testing with Invalid Token (Should Fail)...');
    try {
      await axios.post(`${BACKEND_URL}/api/auth/create-user`, {
        email: 'test@example.com',
        fullName: 'Test User'
      }, {
        headers: {
          'Authorization': 'Bearer invalid-token'
        }
      });
      console.log('‚ùå Should have failed with invalid token');
    } catch (error) {
      if (error.response?.status === 401) {
        console.log('‚úÖ Correctly rejects invalid token');
      } else {
        console.log('‚ùå Unexpected error:', error.response?.data || error.message);
      }
    }
    
    console.log('\n5Ô∏è‚É£ Manual Testing Instructions...');
    console.log('   To test the complete flow:');
    console.log('   1. Start your frontend: npm run dev');
    console.log('   2. Start your backend: cd backend && npm run dev');
    console.log('   3. Go to http://localhost:3000/auth/signup');
    console.log('   4. Create a new account');
    console.log('   5. Check backend console for user creation logs');
    console.log('   6. Check MongoDB for new user record');
    console.log('   7. Try signing in with the new account');
    
    console.log('\n6Ô∏è‚É£ Expected Flow:');
    console.log('   Signup ‚Üí Supabase creates user ‚Üí Frontend calls /api/auth/create-user');
    console.log('   ‚Üí Backend verifies token ‚Üí Creates MongoDB user ‚Üí Success');
    
  } catch (error) {
    console.error('‚ùå Test failed:', error.message);
    if (error.response) {
      console.error('Response status:', error.response.status);
      console.error('Response data:', error.response.data);
    }
  }
}

// Run the test
testUserCreation();
