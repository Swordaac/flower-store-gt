const request = require('supertest');
const mongoose = require('mongoose');
const app = require('./app');
const Order = require('./models/Order');
const Shop = require('./models/Shop');
const Product = require('./models/Product');
const PickupLocation = require('./models/PickupLocation');
const User = require('./models/User');

// Test data
let testShop, testProduct, testPickupLocation, testUser, authToken;

describe('Delivery and Pickup API Tests', () => {
  beforeAll(async () => {
    // Connect to test database
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/flower-store-test');
    
    // Clean up existing test data
    await Order.deleteMany({});
    await Shop.deleteMany({});
    await Product.deleteMany({});
    await PickupLocation.deleteMany({});
    await User.deleteMany({});
  });

  beforeEach(async () => {
    // Create test user
    testUser = new User({
      supabaseUserId: 'test-user-123',
      email: 'test@example.com',
      name: 'Test User',
      role: 'customer'
    });
    await testUser.save();

    // Create test shop
    testShop = new Shop({
      name: 'Test Flower Shop',
      ownerId: 'test-owner-123',
      description: 'A test flower shop',
      phone: '555-0123',
      email: 'shop@example.com',
      address: {
        street: '123 Test Street',
        city: 'Toronto',
        state: 'Ontario',
        postal: 'M5V 3A8',
        country: 'Canada'
      },
      location: {
        type: 'Point',
        coordinates: [-79.3832, 43.6532]
      },
      deliveryOptions: {
        pickup: true,
        delivery: true,
        deliveryRadius: 10,
        deliveryFee: 500, // $5.00
        deliveryTimeSlots: {
          startHour: 9,
          endHour: 18,
          intervalMinutes: 30
        }
      }
    });
    await testShop.save();

    // Create test pickup location
    testPickupLocation = new PickupLocation({
      name: 'Test Pickup Location',
      shopId: testShop._id,
      address: {
        street: '123 Test Street',
        city: 'Toronto',
        province: 'Ontario',
        postalCode: 'M5V 3A8',
        country: 'Canada'
      },
      location: {
        type: 'Point',
        coordinates: [-79.3832, 43.6532]
      },
      phone: '555-0123',
      email: 'pickup@example.com',
      businessHours: {
        monday: { open: '09:00', close: '18:00', isOpen: true },
        tuesday: { open: '09:00', close: '18:00', isOpen: true },
        wednesday: { open: '09:00', close: '18:00', isOpen: true },
        thursday: { open: '09:00', close: '18:00', isOpen: true },
        friday: { open: '09:00', close: '18:00', isOpen: true },
        saturday: { open: '09:00', close: '17:00', isOpen: true },
        sunday: { open: '10:00', close: '16:00', isOpen: false }
      },
      settings: {
        minNoticeHours: 2,
        maxAdvanceDays: 30,
        timeSlotInterval: 30,
        isActive: true
      }
    });
    await testPickupLocation.save();

    // Update shop with pickup location
    testShop.pickupLocations = [testPickupLocation._id];
    await testShop.save();

    // Create test product
    testProduct = new Product({
      name: 'Test Rose Bouquet',
      description: 'A beautiful test rose bouquet',
      price: {
        standard: 2999, // $29.99
        deluxe: 3999,   // $39.99
        premium: 4999   // $49.99
      },
      stock: 10,
      category: ['roses', 'bouquets'],
      tags: ['romantic', 'classic'],
      images: [{
        size: 'medium',
        publicId: 'test-image',
        url: 'https://example.com/test-image.jpg',
        alt: 'Test rose bouquet',
        isPrimary: true
      }],
      isActive: true,
      shopId: testShop._id
    });
    await testProduct.save();

    // Mock auth token (in real implementation, this would be generated by auth system)
    authToken = 'mock-auth-token';
  });

  afterEach(async () => {
    // Clean up after each test
    await Order.deleteMany({});
  });

  afterAll(async () => {
    // Clean up and close connection
    await mongoose.connection.close();
  });

  describe('POST /api/orders - Create Order with Delivery', () => {
    test('should create order with delivery successfully', async () => {
      const orderData = {
        shopId: testShop._id.toString(),
        items: [{
          productId: testProduct._id.toString(),
          quantity: 2
        }],
        delivery: {
          method: 'delivery',
          address: {
            street: '456 Delivery Street',
            city: 'Toronto',
            province: 'Ontario',
            postalCode: 'M5V 3B9',
            country: 'Canada'
          },
          deliveryTime: '14:30',
          contactPhone: '555-0123',
          contactEmail: 'customer@example.com',
          specialInstructions: 'Please ring doorbell twice'
        }
      };

      const response = await request(app)
        .post('/api/orders')
        .set('Authorization', `Bearer ${authToken}`)
        .send(orderData)
        .expect(201);

      expect(response.body.success).toBe(true);
      expect(response.body.data.delivery.method).toBe('delivery');
      expect(response.body.data.delivery.address.street).toBe('456 Delivery Street');
      expect(response.body.data.delivery.deliveryTime).toBe('14:30');
      expect(response.body.data.delivery.contactPhone).toBe('555-0123');
      expect(response.body.data.deliveryFee).toBe(500); // $5.00 delivery fee
    });

    test('should create order with pickup successfully', async () => {
      const orderData = {
        shopId: testShop._id.toString(),
        items: [{
          productId: testProduct._id.toString(),
          quantity: 1
        }],
        delivery: {
          method: 'pickup',
          pickupTime: '15:00',
          pickupLocationId: testPickupLocation._id.toString(),
          contactPhone: '555-0123',
          contactEmail: 'customer@example.com',
          specialInstructions: 'Please call when ready'
        }
      };

      const response = await request(app)
        .post('/api/orders')
        .set('Authorization', `Bearer ${authToken}`)
        .send(orderData)
        .expect(201);

      expect(response.body.success).toBe(true);
      expect(response.body.data.delivery.method).toBe('pickup');
      expect(response.body.data.delivery.pickupTime).toBe('15:00');
      expect(response.body.data.delivery.pickupLocationId).toBe(testPickupLocation._id.toString());
      expect(response.body.data.deliveryFee).toBe(0); // No delivery fee for pickup
    });

    test('should reject order with missing delivery address', async () => {
      const orderData = {
        shopId: testShop._id.toString(),
        items: [{
          productId: testProduct._id.toString(),
          quantity: 1
        }],
        delivery: {
          method: 'delivery',
          address: {
            street: '456 Delivery Street',
            // Missing city, province, postalCode
          },
          deliveryTime: '14:30',
          contactPhone: '555-0123',
          contactEmail: 'customer@example.com'
        }
      };

      const response = await request(app)
        .post('/api/orders')
        .set('Authorization', `Bearer ${authToken}`)
        .send(orderData)
        .expect(400);

      expect(response.body.success).toBe(false);
      expect(response.body.error).toContain('Complete delivery address is required');
    });

    test('should reject order with missing pickup location', async () => {
      const orderData = {
        shopId: testShop._id.toString(),
        items: [{
          productId: testProduct._id.toString(),
          quantity: 1
        }],
        delivery: {
          method: 'pickup',
          pickupTime: '15:00',
          // Missing pickupLocationId
          contactPhone: '555-0123',
          contactEmail: 'customer@example.com'
        }
      };

      const response = await request(app)
        .post('/api/orders')
        .set('Authorization', `Bearer ${authToken}`)
        .send(orderData)
        .expect(400);

      expect(response.body.success).toBe(false);
      expect(response.body.error).toContain('Pickup location is required');
    });

    test('should reject order with invalid pickup location', async () => {
      const orderData = {
        shopId: testShop._id.toString(),
        items: [{
          productId: testProduct._id.toString(),
          quantity: 1
        }],
        delivery: {
          method: 'pickup',
          pickupTime: '15:00',
          pickupLocationId: new mongoose.Types.ObjectId().toString(), // Invalid ID
          contactPhone: '555-0123',
          contactEmail: 'customer@example.com'
        }
      };

      const response = await request(app)
        .post('/api/orders')
        .set('Authorization', `Bearer ${authToken}`)
        .send(orderData)
        .expect(400);

      expect(response.body.success).toBe(false);
      expect(response.body.error).toContain('Invalid pickup location');
    });
  });

  describe('GET /api/orders - Retrieve Orders with Pickup Location Data', () => {
    test('should return orders with populated pickup location data', async () => {
      // Create a test order with pickup
      const order = new Order({
        customerId: testUser.supabaseUserId,
        shopId: testShop._id,
        orderNumber: 'ORD-TEST-001',
        items: [{
          productId: testProduct._id,
          name: 'Test Rose Bouquet',
          price: 2999,
          quantity: 1,
          total: 2999
        }],
        subtotal: 2999,
        taxAmount: 0,
        deliveryFee: 0,
        total: 2999,
        delivery: {
          method: 'pickup',
          pickupTime: '15:00',
          pickupLocationId: testPickupLocation._id,
          contactPhone: '555-0123',
          contactEmail: 'customer@example.com'
        },
        payment: {
          intentId: 'pi_test_123',
          method: 'card',
          status: 'succeeded'
        }
      });
      await order.save();

      const response = await request(app)
        .get('/api/orders')
        .set('Authorization', `Bearer ${authToken}`)
        .expect(200);

      expect(response.body.success).toBe(true);
      expect(response.body.data).toHaveLength(1);
      expect(response.body.data[0].delivery.pickupLocationId).toBeDefined();
      expect(response.body.data[0].delivery.pickupLocationId.name).toBe('Test Pickup Location');
    });
  });

  describe('Pickup Location API Tests', () => {
    test('should get available time slots for pickup location', async () => {
      const response = await request(app)
        .get(`/api/pickup-locations/${testPickupLocation._id}/time-slots`)
        .query({ date: '2024-01-15' })
        .expect(200);

      expect(response.body.success).toBe(true);
      expect(response.body.data.timeSlots).toBeDefined();
      expect(Array.isArray(response.body.data.timeSlots)).toBe(true);
    });

    test('should validate pickup location availability', async () => {
      const response = await request(app)
        .get(`/api/pickup-locations/${testPickupLocation._id}/availability`)
        .expect(200);

      expect(response.body.success).toBe(true);
      expect(response.body.data.isActive).toBe(true);
      expect(response.body.data.businessHours).toBeDefined();
    });
  });
});
